// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parser

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
)


/**
 * General Description
 * This file format is a simple archive format, used mainly both to simplify organization of the files by grouping logically related files together (especially for areas). There is also a gain from having few large files rather than many small files, due to the wastage in the FAT and NTFS file systems. BIF files containing areas typically contain:
 * * one or more WED files, detailing tiles and wallgroups
 * * one or more TIS files, containing the tileset itself
 * * one or more MOS files, containing the minimap graphic
 * * 3 or 4 bitmap files which contain one pixel for each tile needed to cover the region
 * 
 * The bitmaps are named xxxxxxHT.BMP, xxxxxxLM.BMP, xxxxxxSR.BMP and optionally xxxxxxLN.BMP.
 * * xxxxxxHT.BMP: Height map, detailing altitude of each tile cell in the associated wed file
 * * xxxxxxLM.BMP: Light map, detailing the level and colour of illumination each tile cell on the map. Used during daytime
 * * xxxxxxLN.BMP: Light map, detailing the level and colour of illumination each tile cell on the map. Used during night-time
 * * xxxxxxSR.BMP: Search Map, detailing where characters cannot walk, and the footstep sounds
 * @see <a href="https://gibberlings3.github.io/iesdp/file_formats/ie_formats/bif_v1.htm
 * ">Source</a>
 */
type Bif struct {
	Magic []byte
	Version []byte
	NumFileEntries uint32
	NumTilesetEntries uint32
	OfsFileEntries uint32
	_io *kaitai.Stream
	_root *Bif
	_parent kaitai.Struct
	_f_fileEntries bool
	fileEntries []*Bif_FileEntry
	_f_tilesetEntries bool
	tilesetEntries []*Bif_TilesetEntry
}
func NewBif() *Bif {
	return &Bif{
	}
}

func (this Bif) IO_() *kaitai.Stream {
	return this._io
}

func (this *Bif) Read(io *kaitai.Stream, parent kaitai.Struct, root *Bif) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.Magic = tmp1
	if !(bytes.Equal(this.Magic, []uint8{66, 73, 70, 70})) {
		return kaitai.NewValidationNotEqualError([]uint8{66, 73, 70, 70}, this.Magic, this._io, "/seq/0")
	}
	tmp2, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this.Version = tmp2
	if !(bytes.Equal(this.Version, []uint8{86, 49, 32, 32})) {
		return kaitai.NewValidationNotEqualError([]uint8{86, 49, 32, 32}, this.Version, this._io, "/seq/1")
	}
	tmp3, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumFileEntries = uint32(tmp3)
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumTilesetEntries = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsFileEntries = uint32(tmp5)
	return err
}
func (this *Bif) FileEntries() (v []*Bif_FileEntry, err error) {
	if (this._f_fileEntries) {
		return this.fileEntries, nil
	}
	this._f_fileEntries = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsFileEntries), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumFileEntries); i++ {
		_ = i
		tmp6 := NewBif_FileEntry()
		err = tmp6.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.fileEntries = append(this.fileEntries, tmp6)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.fileEntries, nil
}
func (this *Bif) TilesetEntries() (v []*Bif_TilesetEntry, err error) {
	if (this._f_tilesetEntries) {
		return this.tilesetEntries, nil
	}
	this._f_tilesetEntries = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsFileEntries), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumTilesetEntries); i++ {
		_ = i
		tmp7 := NewBif_TilesetEntry()
		err = tmp7.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.tilesetEntries = append(this.tilesetEntries, tmp7)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.tilesetEntries, nil
}
type Bif_FileEntry struct {
	ResLocator uint32
	ResOffset uint32
	LenResBlob uint32
	ResType uint16
	Unknown uint16
	_io *kaitai.Stream
	_root *Bif
	_parent *Bif
	_f_fileExtension bool
	fileExtension string
	_f_resBlob bool
	resBlob []byte
}
func NewBif_FileEntry() *Bif_FileEntry {
	return &Bif_FileEntry{
	}
}

func (this Bif_FileEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Bif_FileEntry) Read(io *kaitai.Stream, parent *Bif, root *Bif) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp8, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ResLocator = uint32(tmp8)
	tmp9, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ResOffset = uint32(tmp9)
	tmp10, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenResBlob = uint32(tmp10)
	tmp11, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ResType = uint16(tmp11)
	tmp12, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Unknown = uint16(tmp12)
	return err
}
func (this *Bif_FileEntry) FileExtension() (v string, err error) {
	if (this._f_fileExtension) {
		return this.fileExtension, nil
	}
	this._f_fileExtension = true
	_pos, err := this._io.Pos()
	if err != nil {
		return "", err
	}
	_, err = this._io.Seek(int64(this.ResOffset), io.SeekStart)
	if err != nil {
		return "", err
	}
	tmp13, err := this._io.ReadBytes(int(4))
	if err != nil {
		return "", err
	}
	tmp13 = kaitai.BytesTerminate(tmp13, 0, false)
	this.fileExtension = string(tmp13)
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return "", err
	}
	return this.fileExtension, nil
}
func (this *Bif_FileEntry) ResBlob() (v []byte, err error) {
	if (this._f_resBlob) {
		return this.resBlob, nil
	}
	this._f_resBlob = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.ResOffset), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp14, err := this._io.ReadBytes(int(this.LenResBlob))
	if err != nil {
		return nil, err
	}
	tmp14 = tmp14
	this.resBlob = tmp14
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.resBlob, nil
}
type Bif_TilesetEntry struct {
	TlsLocator uint32
	TlsOffset uint32
	TlsCount uint32
	TlsLen uint32
	TlsType uint16
	Unknown uint16
	_io *kaitai.Stream
	_root *Bif
	_parent *Bif
}
func NewBif_TilesetEntry() *Bif_TilesetEntry {
	return &Bif_TilesetEntry{
	}
}

func (this Bif_TilesetEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Bif_TilesetEntry) Read(io *kaitai.Stream, parent *Bif, root *Bif) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp15, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TlsLocator = uint32(tmp15)
	tmp16, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TlsOffset = uint32(tmp16)
	tmp17, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TlsCount = uint32(tmp17)
	tmp18, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TlsLen = uint32(tmp18)
	tmp19, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TlsType = uint16(tmp19)
	tmp20, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Unknown = uint16(tmp20)
	return err
}
