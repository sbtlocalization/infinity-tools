// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parser

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"io"
	"bytes"
)


/**
 * DLG files contain the structure of conversations, in what is effectievly a state machine. Dialogs
 * contains string references into the TLK file that make up the actual words of the conversation.
 * Dialogs bear similarities to scripts; each state may have a series of trigger conditions, and
 * effect a series of actions. If the any of the triggers for a state evaluate to false, the state
 * is skipped and the triggers in the next state are evaluated - this occurs when entering into a
 * dialog state, and when presenting a list of responses.
 * 
 * ```
 * state 0:
 *     trigger: NumTimesTalkedTo(0)
 *     Text: "Hello, sailor!"
 * 
 * state 1:
 *     trigger: NumTimesTalkedToGT(5)
 *     Text: "Go away, already!"
 * 
 * state 2:
 *     Text: "Hail and well met, yada yada yada."
 * ```
 * Dialog always attempt to start at state 0. The first time this sample dialog is entered the
 * trigger in state 0 is true, hence the character responds "Hello, sailor!". Subsequent times the
 * dialog is entered the trigger in state 0 will be false, and state 1 is evaluated - this trigger
 * also fails and so state 2 is evaluated. This state evaluates true, and get the associated message
 * is displayed. If the dialog is initiaed five or more times, the trigger in state 1 will evaluate
 * to true and the message associated with that state will be displayed.
 * 
 * In addition to the triggers outlined above, states present a list of responses (aka transitions).
 * Each response may have a series of behaviours associated with it; the response text, a journal
 * entry or an action.
 * @see <a href="https://gibberlings3.github.io/iesdp/file_formats/ie_formats/dlg_v1.htm
 * ">Source</a>
 */
type Dlg struct {
	Header *Dlg_Header
	_io *kaitai.Stream
	_root *Dlg
	_parent interface{}
	_f_stateTriggerTable bool
	stateTriggerTable *Dlg_StateTriggerTable
	_f_transitionTable bool
	transitionTable *Dlg_TransitionTable
	_f_transitionTriggerTable bool
	transitionTriggerTable *Dlg_TransitionTriggerTable
	_f_stateTable bool
	stateTable *Dlg_StateTable
	_f_actionTable bool
	actionTable *Dlg_ActionTable
}
func NewDlg() *Dlg {
	return &Dlg{
	}
}

func (this *Dlg) Read(io *kaitai.Stream, parent interface{}, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewDlg_Header()
	err = tmp1.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp1
	return err
}
func (this *Dlg) StateTriggerTable() (v *Dlg_StateTriggerTable, err error) {
	if (this._f_stateTriggerTable) {
		return this.stateTriggerTable, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._root.Header.StateTriggerTableOffset), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp2 := NewDlg_StateTriggerTable()
	err = tmp2.Read(this._io, this, this._root)
	if err != nil {
		return nil, err
	}
	this.stateTriggerTable = tmp2
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_stateTriggerTable = true
	this._f_stateTriggerTable = true
	return this.stateTriggerTable, nil
}
func (this *Dlg) TransitionTable() (v *Dlg_TransitionTable, err error) {
	if (this._f_transitionTable) {
		return this.transitionTable, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._root.Header.TransitionTableOffset), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp3 := NewDlg_TransitionTable()
	err = tmp3.Read(this._io, this, this._root)
	if err != nil {
		return nil, err
	}
	this.transitionTable = tmp3
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_transitionTable = true
	this._f_transitionTable = true
	return this.transitionTable, nil
}
func (this *Dlg) TransitionTriggerTable() (v *Dlg_TransitionTriggerTable, err error) {
	if (this._f_transitionTriggerTable) {
		return this.transitionTriggerTable, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._root.Header.TransitionTriggerTableOffset), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp4 := NewDlg_TransitionTriggerTable()
	err = tmp4.Read(this._io, this, this._root)
	if err != nil {
		return nil, err
	}
	this.transitionTriggerTable = tmp4
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_transitionTriggerTable = true
	this._f_transitionTriggerTable = true
	return this.transitionTriggerTable, nil
}
func (this *Dlg) StateTable() (v *Dlg_StateTable, err error) {
	if (this._f_stateTable) {
		return this.stateTable, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._root.Header.StateTableOffset), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp5 := NewDlg_StateTable()
	err = tmp5.Read(this._io, this, this._root)
	if err != nil {
		return nil, err
	}
	this.stateTable = tmp5
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_stateTable = true
	this._f_stateTable = true
	return this.stateTable, nil
}
func (this *Dlg) ActionTable() (v *Dlg_ActionTable, err error) {
	if (this._f_actionTable) {
		return this.actionTable, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._root.Header.ActionTableOffset), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp6 := NewDlg_ActionTable()
	err = tmp6.Read(this._io, this, this._root)
	if err != nil {
		return nil, err
	}
	this.actionTable = tmp6
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_actionTable = true
	this._f_actionTable = true
	return this.actionTable, nil
}
type Dlg_TransitionTriggerTable struct {
	Entries []*Dlg_TextEntry
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg
}
func NewDlg_TransitionTriggerTable() *Dlg_TransitionTriggerTable {
	return &Dlg_TransitionTriggerTable{
	}
}

func (this *Dlg_TransitionTriggerTable) Read(io *kaitai.Stream, parent *Dlg, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(this._root.Header.TransitionTriggerCount); i++ {
		_ = i
		tmp7 := NewDlg_TextEntry()
		err = tmp7.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Entries = append(this.Entries, tmp7)
	}
	return err
}
type Dlg_ActionTable struct {
	Entries []*Dlg_TextEntry
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg
}
func NewDlg_ActionTable() *Dlg_ActionTable {
	return &Dlg_ActionTable{
	}
}

func (this *Dlg_ActionTable) Read(io *kaitai.Stream, parent *Dlg, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(this._root.Header.ActionCount); i++ {
		_ = i
		tmp8 := NewDlg_TextEntry()
		err = tmp8.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Entries = append(this.Entries, tmp8)
	}
	return err
}
type Dlg_StateTriggerTable struct {
	Entries []*Dlg_TextEntry
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg
}
func NewDlg_StateTriggerTable() *Dlg_StateTriggerTable {
	return &Dlg_StateTriggerTable{
	}
}

func (this *Dlg_StateTriggerTable) Read(io *kaitai.Stream, parent *Dlg, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(this._root.Header.StateTriggerCount); i++ {
		_ = i
		tmp9 := NewDlg_TextEntry()
		err = tmp9.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Entries = append(this.Entries, tmp9)
	}
	return err
}
type Dlg_StateEntry struct {
	TextRef uint32
	FirstTransitionIndex uint32
	NumTransitions uint32
	StateTriggerIndex uint32
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg_StateTable
	_f_transitions bool
	transitions []*Dlg_TransitionEntry
	_f_trigger bool
	trigger *Dlg_TextEntry
}
func NewDlg_StateEntry() *Dlg_StateEntry {
	return &Dlg_StateEntry{
	}
}

func (this *Dlg_StateEntry) Read(io *kaitai.Stream, parent *Dlg_StateTable, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TextRef = uint32(tmp10)
	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FirstTransitionIndex = uint32(tmp11)
	tmp12, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumTransitions = uint32(tmp12)
	tmp13, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StateTriggerIndex = uint32(tmp13)
	return err
}
func (this *Dlg_StateEntry) Transitions() (v []*Dlg_TransitionEntry, err error) {
	if (this._f_transitions) {
		return this.transitions, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64((this._root.Header.TransitionTableOffset + (this.FirstTransitionIndex * 32))), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumTransitions); i++ {
		_ = i
		tmp14 := NewDlg_TransitionEntry()
		err = tmp14.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.transitions = append(this.transitions, tmp14)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_transitions = true
	this._f_transitions = true
	return this.transitions, nil
}
func (this *Dlg_StateEntry) Trigger() (v *Dlg_TextEntry, err error) {
	if (this._f_trigger) {
		return this.trigger, nil
	}
	if (this.StateTriggerIndex != uint32(4294967295)) {
		_pos, err := this._io.Pos()
		if err != nil {
			return nil, err
		}
		_, err = this._io.Seek(int64((this._root.Header.StateTriggerTableOffset + (this.StateTriggerIndex * 8))), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp15 := NewDlg_TextEntry()
		err = tmp15.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.trigger = tmp15
		_, err = this._io.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_trigger = true
	}
	this._f_trigger = true
	return this.trigger, nil
}
type Dlg_TransitionTable struct {
	Entries []*Dlg_TransitionEntry
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg
}
func NewDlg_TransitionTable() *Dlg_TransitionTable {
	return &Dlg_TransitionTable{
	}
}

func (this *Dlg_TransitionTable) Read(io *kaitai.Stream, parent *Dlg, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(this._root.Header.TransitionCount); i++ {
		_ = i
		tmp16 := NewDlg_TransitionEntry()
		err = tmp16.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Entries = append(this.Entries, tmp16)
	}
	return err
}
type Dlg_Header struct {
	Magic []byte
	Version []byte
	StateCount uint32
	StateTableOffset uint32
	TransitionCount uint32
	TransitionTableOffset uint32
	StateTriggerTableOffset uint32
	StateTriggerCount uint32
	TransitionTriggerTableOffset uint32
	TransitionTriggerCount uint32
	ActionTableOffset uint32
	ActionCount uint32
	ThreatFlags *Dlg_Header_Flags
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg
	_raw_ThreatFlags []byte
}
func NewDlg_Header() *Dlg_Header {
	return &Dlg_Header{
	}
}

func (this *Dlg_Header) Read(io *kaitai.Stream, parent *Dlg, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp17, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp17 = tmp17
	this.Magic = tmp17
	if !(bytes.Equal(this.Magic, []uint8{68, 76, 71, 32})) {
		return kaitai.NewValidationNotEqualError([]uint8{68, 76, 71, 32}, this.Magic, this._io, "/types/header/seq/0")
	}
	tmp18, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp18 = tmp18
	this.Version = tmp18
	if !(bytes.Equal(this.Version, []uint8{86, 49, 46, 48})) {
		return kaitai.NewValidationNotEqualError([]uint8{86, 49, 46, 48}, this.Version, this._io, "/types/header/seq/1")
	}
	tmp19, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StateCount = uint32(tmp19)
	tmp20, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StateTableOffset = uint32(tmp20)
	tmp21, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TransitionCount = uint32(tmp21)
	tmp22, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TransitionTableOffset = uint32(tmp22)
	tmp23, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StateTriggerTableOffset = uint32(tmp23)
	tmp24, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StateTriggerCount = uint32(tmp24)
	tmp25, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TransitionTriggerTableOffset = uint32(tmp25)
	tmp26, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TransitionTriggerCount = uint32(tmp26)
	tmp27, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ActionTableOffset = uint32(tmp27)
	tmp28, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ActionCount = uint32(tmp28)
	tmp29, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp29 = tmp29
	this._raw_ThreatFlags = tmp29
	_io__raw_ThreatFlags := kaitai.NewStream(bytes.NewReader(this._raw_ThreatFlags))
	tmp30 := NewDlg_Header_Flags()
	err = tmp30.Read(_io__raw_ThreatFlags, this, this._root)
	if err != nil {
		return err
	}
	this.ThreatFlags = tmp30
	return err
}
type Dlg_Header_Flags struct {
	TurnHostile bool
	EscapeArea bool
	DoNothing bool
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg_Header
}
func NewDlg_Header_Flags() *Dlg_Header_Flags {
	return &Dlg_Header_Flags{
	}
}

func (this *Dlg_Header_Flags) Read(io *kaitai.Stream, parent *Dlg_Header, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp31, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.TurnHostile = tmp31 != 0
	tmp32, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.EscapeArea = tmp32 != 0
	tmp33, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.DoNothing = tmp33 != 0
	return err
}
type Dlg_StateTable struct {
	Entries []*Dlg_StateEntry
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg
}
func NewDlg_StateTable() *Dlg_StateTable {
	return &Dlg_StateTable{
	}
}

func (this *Dlg_StateTable) Read(io *kaitai.Stream, parent *Dlg, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(this._root.Header.StateCount); i++ {
		_ = i
		tmp34 := NewDlg_StateEntry()
		err = tmp34.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Entries = append(this.Entries, tmp34)
	}
	return err
}
type Dlg_TransitionEntry struct {
	Flags *Dlg_TransitionEntry_Flags
	TextRef uint32
	JournalTextRef uint32
	TransitionTriggerIndex uint32
	TransitionActionIndex uint32
	NextStateResource string
	NextStateIndex uint32
	_io *kaitai.Stream
	_root *Dlg
	_parent interface{}
	_raw_Flags []byte
	_f_trigger bool
	trigger *Dlg_TextEntry
	_f_action bool
	action *Dlg_TextEntry
}
func NewDlg_TransitionEntry() *Dlg_TransitionEntry {
	return &Dlg_TransitionEntry{
	}
}

func (this *Dlg_TransitionEntry) Read(io *kaitai.Stream, parent interface{}, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp35, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp35 = tmp35
	this._raw_Flags = tmp35
	_io__raw_Flags := kaitai.NewStream(bytes.NewReader(this._raw_Flags))
	tmp36 := NewDlg_TransitionEntry_Flags()
	err = tmp36.Read(_io__raw_Flags, this, this._root)
	if err != nil {
		return err
	}
	this.Flags = tmp36
	tmp37, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TextRef = uint32(tmp37)
	tmp38, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.JournalTextRef = uint32(tmp38)
	tmp39, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TransitionTriggerIndex = uint32(tmp39)
	tmp40, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TransitionActionIndex = uint32(tmp40)
	tmp41, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp41 = tmp41
	this.NextStateResource = string(tmp41)
	tmp42, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NextStateIndex = uint32(tmp42)
	return err
}
func (this *Dlg_TransitionEntry) Trigger() (v *Dlg_TextEntry, err error) {
	if (this._f_trigger) {
		return this.trigger, nil
	}
	if (this.Flags.WithTrigger) {
		_pos, err := this._io.Pos()
		if err != nil {
			return nil, err
		}
		_, err = this._io.Seek(int64((this._root.Header.TransitionTriggerTableOffset + (this.TransitionTriggerIndex * 8))), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp43 := NewDlg_TextEntry()
		err = tmp43.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.trigger = tmp43
		_, err = this._io.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_trigger = true
	}
	this._f_trigger = true
	return this.trigger, nil
}
func (this *Dlg_TransitionEntry) Action() (v *Dlg_TextEntry, err error) {
	if (this._f_action) {
		return this.action, nil
	}
	if (this.Flags.WithAction) {
		_pos, err := this._io.Pos()
		if err != nil {
			return nil, err
		}
		_, err = this._io.Seek(int64((this._root.Header.ActionTableOffset + (this.TransitionActionIndex * 8))), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp44 := NewDlg_TextEntry()
		err = tmp44.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.action = tmp44
		_, err = this._io.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_action = true
	}
	this._f_action = true
	return this.action, nil
}
type Dlg_TransitionEntry_Flags struct {
	WithText bool
	WithTrigger bool
	WithAction bool
	DialogEnd bool
	HasJournalEntry bool
	Interrupt bool
	AddUnsolvedQuest bool
	AddJournalNote bool
	AddSolvedQuest bool
	ImmediateAction bool
	ClearActions bool
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg_TransitionEntry
}
func NewDlg_TransitionEntry_Flags() *Dlg_TransitionEntry_Flags {
	return &Dlg_TransitionEntry_Flags{
	}
}

func (this *Dlg_TransitionEntry_Flags) Read(io *kaitai.Stream, parent *Dlg_TransitionEntry, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp45, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.WithText = tmp45 != 0
	tmp46, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.WithTrigger = tmp46 != 0
	tmp47, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.WithAction = tmp47 != 0
	tmp48, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.DialogEnd = tmp48 != 0
	tmp49, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.HasJournalEntry = tmp49 != 0
	tmp50, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Interrupt = tmp50 != 0
	tmp51, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AddUnsolvedQuest = tmp51 != 0
	tmp52, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AddJournalNote = tmp52 != 0
	tmp53, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AddSolvedQuest = tmp53 != 0
	tmp54, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.ImmediateAction = tmp54 != 0
	tmp55, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.ClearActions = tmp55 != 0
	return err
}
type Dlg_TextEntry struct {
	StringOffset uint32
	StringLength uint32
	_io *kaitai.Stream
	_root *Dlg
	_parent interface{}
	_f_text bool
	text string
}
func NewDlg_TextEntry() *Dlg_TextEntry {
	return &Dlg_TextEntry{
	}
}

func (this *Dlg_TextEntry) Read(io *kaitai.Stream, parent interface{}, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp56, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StringOffset = uint32(tmp56)
	tmp57, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StringLength = uint32(tmp57)
	return err
}
func (this *Dlg_TextEntry) Text() (v string, err error) {
	if (this._f_text) {
		return this.text, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return "", err
	}
	_, err = thisIo.Seek(int64(this.StringOffset), io.SeekStart)
	if err != nil {
		return "", err
	}
	tmp58, err := thisIo.ReadBytes(int(this.StringLength))
	if err != nil {
		return "", err
	}
	tmp58 = tmp58
	this.text = string(tmp58)
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return "", err
	}
	this._f_text = true
	this._f_text = true
	return this.text, nil
}
