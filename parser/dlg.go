// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parser

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
)


/**
 * DLG files contain the structure of conversations, in what is effectievly a state machine. Dialogs
 * contains string references into the TLK file that make up the actual words of the conversation.
 * Dialogs bear similarities to scripts; each state may have a series of trigger conditions, and
 * effect a series of actions. If the any of the triggers for a state evaluate to false, the state
 * is skipped and the triggers in the next state are evaluated - this occurs when entering into a
 * dialog state, and when presenting a list of responses.
 * 
 * ```
 * state 0:
 *     trigger: NumTimesTalkedTo(0)
 *     Text: "Hello, sailor!"
 * 
 * state 1:
 *     trigger: NumTimesTalkedToGT(5)
 *     Text: "Go away, already!"
 * 
 * state 2:
 *     Text: "Hail and well met, yada yada yada."
 * ```
 * Dialog always attempt to start at state 0. The first time this sample dialog is entered the
 * trigger in state 0 is true, hence the character responds "Hello, sailor!". Subsequent times the
 * dialog is entered the trigger in state 0 will be false, and state 1 is evaluated - this trigger
 * also fails and so state 2 is evaluated. This state evaluates true, and get the associated message
 * is displayed. If the dialog is initiaed five or more times, the trigger in state 1 will evaluate
 * to true and the message associated with that state will be displayed.
 * 
 * In addition to the triggers outlined above, states present a list of responses (aka transitions).
 * Each response may have a series of behaviours associated with it; the response text, a journal
 * entry or an action.
 * @see <a href="https://gibberlings3.github.io/iesdp/file_formats/ie_formats/dlg_v1.htm
 * ">Source</a>
 */
type Dlg struct {
	Magic []byte
	Version []byte
	NumStates uint32
	OfsStates uint32
	NumTransitions uint32
	OfsTransitions uint32
	OfsStateTriggers uint32
	NumStateTriggers uint32
	OfsTransitionTriggers uint32
	NumTransitionTriggers uint32
	OfsActions uint32
	NumActions uint32
	ThreatFlags *Dlg_HeaderFlags
	_io *kaitai.Stream
	_root *Dlg
	_parent interface{}
	_raw_ThreatFlags []byte
	_f_stateTriggers bool
	stateTriggers []*Dlg_TextEntry
	_f_transitionTriggers bool
	transitionTriggers []*Dlg_TextEntry
	_f_transitions bool
	transitions []*Dlg_TransitionEntry
	_f_states bool
	states []*Dlg_StateEntry
	_f_actions bool
	actions []*Dlg_TextEntry
}
func NewDlg() *Dlg {
	return &Dlg{
	}
}

func (this *Dlg) Read(io *kaitai.Stream, parent interface{}, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.Magic = tmp1
	if !(bytes.Equal(this.Magic, []uint8{68, 76, 71, 32})) {
		return kaitai.NewValidationNotEqualError([]uint8{68, 76, 71, 32}, this.Magic, this._io, "/seq/0")
	}
	tmp2, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this.Version = tmp2
	if !(bytes.Equal(this.Version, []uint8{86, 49, 46, 48})) {
		return kaitai.NewValidationNotEqualError([]uint8{86, 49, 46, 48}, this.Version, this._io, "/seq/1")
	}
	tmp3, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumStates = uint32(tmp3)
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsStates = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumTransitions = uint32(tmp5)
	tmp6, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsTransitions = uint32(tmp6)
	tmp7, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsStateTriggers = uint32(tmp7)
	tmp8, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumStateTriggers = uint32(tmp8)
	tmp9, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsTransitionTriggers = uint32(tmp9)
	tmp10, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumTransitionTriggers = uint32(tmp10)
	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsActions = uint32(tmp11)
	tmp12, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumActions = uint32(tmp12)
	tmp13, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp13 = tmp13
	this._raw_ThreatFlags = tmp13
	_io__raw_ThreatFlags := kaitai.NewStream(bytes.NewReader(this._raw_ThreatFlags))
	tmp14 := NewDlg_HeaderFlags()
	err = tmp14.Read(_io__raw_ThreatFlags, this, this._root)
	if err != nil {
		return err
	}
	this.ThreatFlags = tmp14
	return err
}
func (this *Dlg) StateTriggers() (v []*Dlg_TextEntry, err error) {
	if (this._f_stateTriggers) {
		return this.stateTriggers, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsStateTriggers), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumStateTriggers); i++ {
		_ = i
		tmp15 := NewDlg_TextEntry()
		err = tmp15.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.stateTriggers = append(this.stateTriggers, tmp15)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_stateTriggers = true
	this._f_stateTriggers = true
	return this.stateTriggers, nil
}
func (this *Dlg) TransitionTriggers() (v []*Dlg_TextEntry, err error) {
	if (this._f_transitionTriggers) {
		return this.transitionTriggers, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsTransitionTriggers), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumTransitionTriggers); i++ {
		_ = i
		tmp16 := NewDlg_TextEntry()
		err = tmp16.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.transitionTriggers = append(this.transitionTriggers, tmp16)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_transitionTriggers = true
	this._f_transitionTriggers = true
	return this.transitionTriggers, nil
}
func (this *Dlg) Transitions() (v []*Dlg_TransitionEntry, err error) {
	if (this._f_transitions) {
		return this.transitions, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsTransitions), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumTransitions); i++ {
		_ = i
		tmp17 := NewDlg_TransitionEntry()
		err = tmp17.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.transitions = append(this.transitions, tmp17)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_transitions = true
	this._f_transitions = true
	return this.transitions, nil
}
func (this *Dlg) States() (v []*Dlg_StateEntry, err error) {
	if (this._f_states) {
		return this.states, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsStates), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumStates); i++ {
		_ = i
		tmp18 := NewDlg_StateEntry()
		err = tmp18.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.states = append(this.states, tmp18)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_states = true
	this._f_states = true
	return this.states, nil
}
func (this *Dlg) Actions() (v []*Dlg_TextEntry, err error) {
	if (this._f_actions) {
		return this.actions, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsActions), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumActions); i++ {
		_ = i
		tmp19 := NewDlg_TextEntry()
		err = tmp19.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.actions = append(this.actions, tmp19)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_actions = true
	this._f_actions = true
	return this.actions, nil
}
type Dlg_HeaderFlags struct {
	TurnHostile bool
	EscapeArea bool
	DoNothing bool
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg
}
func NewDlg_HeaderFlags() *Dlg_HeaderFlags {
	return &Dlg_HeaderFlags{
	}
}

func (this *Dlg_HeaderFlags) Read(io *kaitai.Stream, parent *Dlg, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp20, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.TurnHostile = tmp20 != 0
	tmp21, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.EscapeArea = tmp21 != 0
	tmp22, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.DoNothing = tmp22 != 0
	return err
}
type Dlg_StateEntry struct {
	TextRef uint32
	FirstTransitionIndex uint32
	NumTransitions uint32
	StateTriggerIndex uint32
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg
	_f_transitions bool
	transitions []*Dlg_TransitionEntry
	_f_trigger bool
	trigger *Dlg_TextEntry
}
func NewDlg_StateEntry() *Dlg_StateEntry {
	return &Dlg_StateEntry{
	}
}

func (this *Dlg_StateEntry) Read(io *kaitai.Stream, parent *Dlg, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp23, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TextRef = uint32(tmp23)
	tmp24, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FirstTransitionIndex = uint32(tmp24)
	tmp25, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumTransitions = uint32(tmp25)
	tmp26, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StateTriggerIndex = uint32(tmp26)
	return err
}
func (this *Dlg_StateEntry) Transitions() (v []*Dlg_TransitionEntry, err error) {
	if (this._f_transitions) {
		return this.transitions, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64((this._root.OfsTransitions + (this.FirstTransitionIndex * 32))), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumTransitions); i++ {
		_ = i
		tmp27 := NewDlg_TransitionEntry()
		err = tmp27.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.transitions = append(this.transitions, tmp27)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_transitions = true
	this._f_transitions = true
	return this.transitions, nil
}
func (this *Dlg_StateEntry) Trigger() (v *Dlg_TextEntry, err error) {
	if (this._f_trigger) {
		return this.trigger, nil
	}
	if (this.StateTriggerIndex != uint32(4294967295)) {
		_pos, err := this._io.Pos()
		if err != nil {
			return nil, err
		}
		_, err = this._io.Seek(int64((this._root.OfsStateTriggers + (this.StateTriggerIndex * 8))), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp28 := NewDlg_TextEntry()
		err = tmp28.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.trigger = tmp28
		_, err = this._io.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_trigger = true
	}
	this._f_trigger = true
	return this.trigger, nil
}
type Dlg_TransitionEntry struct {
	Flags *Dlg_TransitionEntry_Flags
	TextRef uint32
	JournalTextRef uint32
	TransitionTriggerIndex uint32
	TransitionActionIndex uint32
	NextStateResource string
	NextStateIndex uint32
	_io *kaitai.Stream
	_root *Dlg
	_parent interface{}
	_raw_Flags []byte
	_f_trigger bool
	trigger *Dlg_TextEntry
	_f_action bool
	action *Dlg_TextEntry
}
func NewDlg_TransitionEntry() *Dlg_TransitionEntry {
	return &Dlg_TransitionEntry{
	}
}

func (this *Dlg_TransitionEntry) Read(io *kaitai.Stream, parent interface{}, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp29, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp29 = tmp29
	this._raw_Flags = tmp29
	_io__raw_Flags := kaitai.NewStream(bytes.NewReader(this._raw_Flags))
	tmp30 := NewDlg_TransitionEntry_Flags()
	err = tmp30.Read(_io__raw_Flags, this, this._root)
	if err != nil {
		return err
	}
	this.Flags = tmp30
	tmp31, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TextRef = uint32(tmp31)
	tmp32, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.JournalTextRef = uint32(tmp32)
	tmp33, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TransitionTriggerIndex = uint32(tmp33)
	tmp34, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TransitionActionIndex = uint32(tmp34)
	tmp35, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp35 = kaitai.BytesTerminate(tmp35, 0, false)
	this.NextStateResource = string(tmp35)
	tmp36, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NextStateIndex = uint32(tmp36)
	return err
}
func (this *Dlg_TransitionEntry) Trigger() (v *Dlg_TextEntry, err error) {
	if (this._f_trigger) {
		return this.trigger, nil
	}
	if (this.Flags.WithTrigger) {
		_pos, err := this._io.Pos()
		if err != nil {
			return nil, err
		}
		_, err = this._io.Seek(int64((this._root.OfsTransitionTriggers + (this.TransitionTriggerIndex * 8))), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp37 := NewDlg_TextEntry()
		err = tmp37.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.trigger = tmp37
		_, err = this._io.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_trigger = true
	}
	this._f_trigger = true
	return this.trigger, nil
}
func (this *Dlg_TransitionEntry) Action() (v *Dlg_TextEntry, err error) {
	if (this._f_action) {
		return this.action, nil
	}
	if (this.Flags.WithAction) {
		_pos, err := this._io.Pos()
		if err != nil {
			return nil, err
		}
		_, err = this._io.Seek(int64((this._root.OfsActions + (this.TransitionActionIndex * 8))), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp38 := NewDlg_TextEntry()
		err = tmp38.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.action = tmp38
		_, err = this._io.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_action = true
	}
	this._f_action = true
	return this.action, nil
}
type Dlg_TransitionEntry_Flags struct {
	WithText bool
	WithTrigger bool
	WithAction bool
	DialogEnd bool
	WithJournalEntry bool
	Interrupt bool
	AddUnsolvedQuest bool
	AddJournalNote bool
	AddSolvedQuest bool
	ImmediateAction bool
	ClearActions bool
	_io *kaitai.Stream
	_root *Dlg
	_parent *Dlg_TransitionEntry
}
func NewDlg_TransitionEntry_Flags() *Dlg_TransitionEntry_Flags {
	return &Dlg_TransitionEntry_Flags{
	}
}

func (this *Dlg_TransitionEntry_Flags) Read(io *kaitai.Stream, parent *Dlg_TransitionEntry, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp39, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.WithText = tmp39 != 0
	tmp40, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.WithTrigger = tmp40 != 0
	tmp41, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.WithAction = tmp41 != 0
	tmp42, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.DialogEnd = tmp42 != 0
	tmp43, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.WithJournalEntry = tmp43 != 0
	tmp44, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Interrupt = tmp44 != 0
	tmp45, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AddUnsolvedQuest = tmp45 != 0
	tmp46, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AddJournalNote = tmp46 != 0
	tmp47, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AddSolvedQuest = tmp47 != 0
	tmp48, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.ImmediateAction = tmp48 != 0
	tmp49, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.ClearActions = tmp49 != 0
	return err
}
type Dlg_TextEntry struct {
	OfsText uint32
	LenText uint32
	_io *kaitai.Stream
	_root *Dlg
	_parent interface{}
	_f_text bool
	text string
}
func NewDlg_TextEntry() *Dlg_TextEntry {
	return &Dlg_TextEntry{
	}
}

func (this *Dlg_TextEntry) Read(io *kaitai.Stream, parent interface{}, root *Dlg) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp50, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsText = uint32(tmp50)
	tmp51, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenText = uint32(tmp51)
	return err
}
func (this *Dlg_TextEntry) Text() (v string, err error) {
	if (this._f_text) {
		return this.text, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return "", err
	}
	_, err = thisIo.Seek(int64(this.OfsText), io.SeekStart)
	if err != nil {
		return "", err
	}
	tmp52, err := thisIo.ReadBytes(int(this.LenText))
	if err != nil {
		return "", err
	}
	tmp52 = tmp52
	this.text = string(tmp52)
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return "", err
	}
	this._f_text = true
	this._f_text = true
	return this.text, nil
}
